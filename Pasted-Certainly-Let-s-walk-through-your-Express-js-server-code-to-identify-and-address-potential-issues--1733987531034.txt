Certainly! Let’s walk through your Express.js server code to identify and address potential issues. Given the complexity and size of the code, we’ll break down the debugging process into several key areas:
	1.	Duplicate Interface and Type Definitions
	2.	CORS Configuration Issues
	3.	Redundant trust proxy Settings
	4.	Middleware Initialization and Order
	5.	Error Handling Logic
	6.	Static File Serving Concerns
	7.	Server Initialization and Port Handling
	8.	General Code Cleanliness and Best Practices

1. Duplicate Interface and Type Definitions

Issue:

You’ve defined several interfaces and types multiple times in your code. For example, AppError, StaticFileError, ErrorHandler, LogMessage, StaticErrorLog, and TypedRequest are each defined twice.

Impact:
	•	TypeScript Errors: TypeScript may throw errors about duplicate identifiers.
	•	Confusion: It can lead to confusion about which definition is being used, especially if there are subtle differences.

Solution:

Remove the duplicate definitions and ensure each interface or type is defined only once. Consolidate them in a single place, preferably in a separate types.ts or interfaces.ts file for better maintainability.

Example Correction:

// Remove the second set of duplicate interface definitions.
// Ensure only one definition exists for each interface/type.

// Example: Keep only one AppError definition
interface AppError extends ExtendedError {
  context: {
    statusCode: number;
    errorCode: string;
    metadata?: StaticFileMetadata;
    requestId?: string;
    path?: string;
    method?: string;
    timestamp?: Date;
  };
}

2. CORS Configuration Issues

Issue:

In your CORS configuration, you’re incorrectly testing the origin string against file extensions:

// Allow access to static assets from any origin
if (/\.(js|css|png|jpg|jpeg|gif|ico|svg)$/.test(origin)) {
  callback(null, true);
  return;
}

Impact:
	•	Incorrect Logic: The origin represents the requesting origin (e.g., https://example.com), not the requested resource path. Testing origin against file extensions doesn’t make sense and will likely always fail unless the origin itself contains such extensions, which is not typical.

Solution:

Remove the check for file extensions in the CORS origin function. Instead, handle static asset caching and serving separately from CORS logic.

Example Correction:

const corsOptions: cors.CorsOptions = {
  origin: (origin, callback) => {
    const allowedOrigins = [
      env.APP_URL,
      'http://localhost:3000',
      'http://localhost:5000',
      // Allow all subdomains of repl.co and replit.dev
      /^https?:\/\/[^.]+\.repl\.co$/,
      /^https?:\/\/[^.]+\.replit\.dev$/
    ];

    // Allow requests with no origin (like mobile apps, curl requests, or same-origin)
    if (!origin || origin === 'null') {
      callback(null, true);
      return;
    }

    // Allow all origins in development
    if (env.NODE_ENV === 'development') {
      callback(null, true);
      return;
    }

    // Remove the incorrect file extension check
    // if (/\.(js|css|png|jpg|jpeg|gif|ico|svg)$/.test(origin)) {
    //   callback(null, true);
    //   return;
    // }

    // Check against allowed origins in production
    const isAllowed = allowedOrigins.some(allowed => 
      typeof allowed === 'string' 
        ? allowed === origin 
        : allowed.test(origin)
    );

    if (isAllowed) {
      callback(null, true);
    } else {
      warn({
        message: 'CORS blocked origin',
        origin,
        allowedOrigins: allowedOrigins.map(o => o.toString())
      });
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
  methods: ['GET', 'HEAD', 'PUT', 'PATCH', 'POST', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Cache-Control', 'Origin'],
  exposedHeaders: ['Content-Type', 'Content-Length', 'Set-Cookie', 'ETag', 'Cache-Control'],
  maxAge: 86400,
  optionsSuccessStatus: 204,
  preflightContinue: false
};

3. Redundant trust proxy Settings

Issue:

You’re setting the trust proxy setting twice:
	1.	Outside initializeMiddleware:

// Configure trust proxy settings separately
app.set('trust proxy', (ip: string) => {
  return ip === '127.0.0.1' || 
         ip.startsWith('10.') || 
         ip.startsWith('172.16.') || 
         ip.startsWith('192.168.');
});


	2.	Inside initializeMiddleware:

if (env.NODE_ENV === 'production') {
  // Configure trust proxy for Replit's environment
  app.set('trust proxy', (ip: string) => {
    return ip === '127.0.0.1' || 
           ip.startsWith('10.') || 
           ip.startsWith('172.16.') || 
           ip.startsWith('192.168.');
  });
} else {
  app.set('json spaces', 2);
}



Impact:
	•	Confusion: It’s unclear which trust proxy configuration takes precedence.
	•	Potential Conflicts: If configurations differ, it might lead to unexpected behavior.

Solution:

Consolidate the trust proxy configuration. Decide whether it should be set globally or within initializeMiddleware based on environment. Preferably, handle all environment-specific settings within initializeMiddleware.

Example Correction:
	•	Remove the global trust proxy setting outside initializeMiddleware.
	•	Ensure trust proxy is correctly set inside initializeMiddleware based on NODE_ENV.

// Remove the global trust proxy setting
// app.set('trust proxy', ...);

async function initializeMiddleware() {
  try {
    // Environment-specific settings
    if (env.NODE_ENV === 'production') {
      // Configure trust proxy for Replit's environment
      app.set('trust proxy', (ip: string) => {
        return ip === '127.0.0.1' || 
               ip.startsWith('10.') || 
               ip.startsWith('172.16.') || 
               ip.startsWith('192.168.');
      });
    } else {
      app.set('json spaces', 2);
    }
    // ... rest of the middleware initialization
  } catch (err) {
    // Error handling
  }
}

4. Middleware Initialization and Order

Issue:

The order in which middleware is applied is crucial in Express.js. Some middleware depends on others being initialized first. Potential concerns in your setup:
	•	Session Middleware: Should be initialized before any middleware that relies on session data.
	•	Body Parsers: Typically placed before session and authentication middleware.
	•	Error Handling Middleware: Should be defined after all other app.use() and routes.

Impact:
	•	Unexpected Behavior: Middleware may not function as intended if dependencies are not met.
	•	Security Risks: Improper ordering can expose vulnerabilities.

Solution:

Ensure the middleware is applied in the correct order. Here’s a recommended order based on your code:
	1.	Session Middleware
	2.	Session Cleanup Middleware
	3.	Security Headers Middleware
	4.	CORS Middleware
	5.	Rate Limiting Middleware
	6.	Input Sanitization Middleware
	7.	Session Security Middleware
	8.	Body Parsing Middleware
	9.	Static File Serving Middleware
	10.	Route Registration
	11.	Error Handling Middleware

Example Correction:

Ensure the initializeMiddleware function follows the above order:

async function initializeMiddleware() {
  try {
    // Environment-specific settings
    if (env.NODE_ENV === 'production') {
      app.set('trust proxy', (ip: string) => {
        return ip === '127.0.0.1' || 
               ip.startsWith('10.') || 
               ip.startsWith('172.16.') || 
               ip.startsWith('192.168.');
      });
    } else {
      app.set('json spaces', 2);
    }
    app.set('x-powered-by', false);
    
    info(`Server initializing in ${env.NODE_ENV} mode`);

    // Initialize session first
    const sessionConfig = await createSessionConfig();
    if (!sessionConfig) {
      throw new Error('Failed to create session configuration');
    }
    app.use(session(sessionConfig));
    
    // Add session cleanup middleware
    app.use(cleanupSessions);

    // Apply basic security headers
    app.use(securityHeaders);
    
    // Apply CORS
    app.use(cors(corsOptions));
    
    // Apply general rate limiting for DoS protection
    app.use(limiter);
    
    // Apply parameter sanitization
    app.use(sanitizeInput);
    
    // Apply session security
    app.use(sessionSecurity);

    // Body parsing middleware with size limits and validation
    app.use(express.json({ 
      limit: '10mb',
      verify: (req: Request, res: Response, buf: Buffer) => {
        if (req.headers['content-type']?.includes('application/json')) {
          try {
            JSON.parse(buf.toString());
          } catch (e) {
            res.status(400).json({ message: 'Invalid JSON' });
            throw new Error('Invalid JSON');
          }
        }
        return true;
      }
    }));
    app.use(express.urlencoded({ extended: true, limit: '10mb' }));

    // Static file serving with proper caching
    const publicPath = path.resolve(__dirname, '..', 'dist', 'public');
    if (!fs.existsSync(publicPath)) {
      fs.mkdirSync(publicPath, { recursive: true });
    }

    // Configure static file serving based on environment
    if (env.NODE_ENV === 'production') {
      // Production static file serving
      // ... existing static file middleware
    } else {
      // Development static file serving with Vite
      const server = createServer(app);
      await setupVite(app, server);
    }

    info('Middleware initialized successfully');
  } catch (err) {
    error({
      message: 'Failed to initialize middleware',
      stack: err instanceof Error ? err.stack : undefined
    });
    throw err;
  }
}

5. Error Handling Logic

Issue:

Your error handling middleware seems comprehensive but has some potential issues:
	•	Order of Error Handlers: Ensure specific error handlers are defined before the general error handler.
	•	Error Logging: Ensure all errors are properly logged without exposing sensitive information.
	•	Final Route Handler: The final app.get('*', ...) should typically be before the general error handler to catch non-API routes.

Impact:
	•	Unhandled Errors: Errors might not be caught as expected.
	•	Security Risks: Sensitive information might be exposed in error responses.

Solution:

Review the order and logic of your error handling middleware to ensure it catches and processes errors correctly.

Example Correction:

Ensure setupErrorHandlers is called after all routes are registered and before the final route handler.

// Inside main function after registerRoutes(app)
registerRoutes(app);
info('Routes registered');

// Setup error handlers before the final catch-all route
setupErrorHandlers();
info('Error handlers configured');

// Handle client-side routing for non-API routes after error handlers
app.get('*', (req: Request, res: Response, next: NextFunction) => {
  if (req.path.startsWith('/api/')) {
    next();
  } else {
    res.sendFile('index.html', { 
      root: path.join(__dirname, '..', 'dist', 'public')
    });
  }
});

Additionally, ensure that the final error handler is indeed the last middleware.

6. Static File Serving Concerns

Issue:

Several potential issues in static file serving:
	•	Setting Content Types: You manually set content types based on file extensions, which might be redundant since express.static handles this.
	•	Error Handling for Static Files: Ensure that static file errors are correctly differentiated from other errors.
	•	Cache Control Headers: Ensure cache headers are appropriately set without conflicting with client expectations.

Impact:
	•	Incorrect Headers: May lead to caching issues or improper content rendering.
	•	Performance Issues: Redundant or inefficient middleware can degrade performance.

Solution:

Leverage express.static’s built-in capabilities where possible and refine custom header settings.

Example Correction:
	1.	Simplify Content Type Handling:
Unless you have specific reasons, let express.static handle Content-Type headers. Remove the middleware that manually sets them.

// Remove the following middleware if unnecessary
app.use((req, res, next) => {
  const ext = path.extname(req.path).toLowerCase();
  if (ext === '.js' || ext === '.mjs') {
    res.type('application/javascript');
  } else if (ext === '.css') {
    res.type('text/css');
  } else if (ext === '.json') {
    res.type('application/json');
  }
  next();
});


	2.	Refine Cache Control Headers:
Ensure that cache headers are set correctly within setHeaders:

const staticOptions: StaticFileOptions = {
  index: false,
  etag: true,
  lastModified: true,
  setHeaders: (res, filepath) => {
    res.setHeader('X-Content-Type-Options', 'nosniff');

    const ext = path.extname(filepath).toLowerCase();
    let cacheControl = 'public, max-age=86400';

    if (ext === '.html') {
      res.setHeader('Pragma', 'no-cache');
      res.setHeader('Expires', '0');
      cacheControl = 'no-cache, no-store, must-revalidate';
    } else if (['.js', '.mjs', '.css', '.png', '.jpg', '.jpeg', '.gif', '.ico', '.svg'].includes(ext)) {
      cacheControl = 'public, max-age=31536000, immutable';
    }

    res.setHeader('Cache-Control', cacheControl);

    // Remove manual Content-Type headers if unnecessary
  },
  maxAge: '1d', // Set default maxAge if needed
  immutable: true
};


	3.	Ensure Proper Error Handling:
Verify that static file errors are correctly handled without affecting other routes.

// Static file error handling middleware should be defined after static routes
if (env.NODE_ENV === 'production') {
  // ... static file middleware

  // Add static file error handling middleware
  app.use((err: Error | StaticFileError, req: TypedRequest, res: Response, next: NextFunction) => {
    if (err && (req.path.startsWith('/assets/') || path.extname(req.path))) {
      const errorDetails: StaticErrorLog = {
        message: 'Static file serving error',
        path: req.path,
        error_message: err.message,
        metadata: {
          request_headers: Object.fromEntries(Object.entries(req.headers)),
          response_headers: Object.fromEntries(Object.entries(res.getHeaders())),
          mime_type: req.get('Content-Type') || '',
          method: req.method
        }
      };
      
      error(errorDetails);
      
      if ('code' in err && err.code === 'ENOENT') {
        return res.status(404).json({ 
          message: 'File not found',
          path: req.path,
          requestId: req.headers['x-request-id']
        });
      }
      
      return res.status(500).json({ 
        message: 'Error serving static file',
        requestId: req.headers['x-request-id']
      });
    }
    next(err);
  });
}

7. Server Initialization and Port Handling

Issue:

In the main function, when handling the EADDRINUSE error, the server attempts to listen on PORT + 1 but doesn’t update the PORT variable. Additionally, if the next port is also in use, it may not handle further retries.

Impact:
	•	Port Conflicts: The server might not start if consecutive ports are also in use.
	•	Inconsistent Logging: The logged PORT may not reflect the actual port the server is listening on after retries.

Solution:

Implement a retry mechanism that attempts to listen on the next available port a certain number of times, updating the PORT variable accordingly. Also, log the actual port the server ends up using.

Example Correction:

async function main() {
  let PORT = parseInt(process.env.PORT || '5000', 10);
  let server: ReturnType<typeof createServer> | undefined;

  try {
    // ... database connection and middleware initialization

    // Register routes and error handlers
    registerRoutes(app);
    info('Routes registered');
    setupErrorHandlers();
    info('Error handlers configured');

    // Create HTTP server
    server = createServer(app);
    info('HTTP server created');

    // Start server with retry mechanism
    const maxRetries = 5;
    let retries = 0;

    while (retries < maxRetries) {
      try {
        await new Promise<void>((resolve, reject) => {
          server!.listen(PORT, '0.0.0.0', () => {
            resolve();
          });

          server!.once('error', (err: NodeJS.ErrnoException) => {
            if (err.code === 'EADDRINUSE') {
              reject(new Error('EADDRINUSE'));
            } else {
              reject(err);
            }
          });
        });

        info(`Server running in ${env.NODE_ENV} mode on port ${PORT}`);
        info(`APP_URL: ${env.APP_URL}`);
        break; // Successfully started the server
      } catch (err) {
        if ((err as Error).message === 'EADDRINUSE') {
          warn(`Port ${PORT} is in use, trying ${PORT + 1}`);
          PORT += 1;
          retries += 1;
        } else {
          throw err; // Re-throw unexpected errors
        }
      }
    }

    if (retries === maxRetries) {
      throw new Error(`Failed to bind to any port after ${maxRetries} attempts`);
    }

  } catch (err) {
    // ... error logging and server shutdown
  }

  // ... signal handlers
}

Additional Recommendations:
	•	Dynamic Port Selection: Consider using dynamic port selection mechanisms or environment variables to specify a range.
	•	Consistent Logging: After successful binding, log the actual port the server is listening on.

8. General Code Cleanliness and Best Practices

Issue:
	•	Unnecessary Imports: Ensure that all imported modules and types are used to avoid bloat.
	•	Error Messages: Be cautious about the information exposed in error messages, especially in production.
	•	Async/Await in Middleware: Ensure that asynchronous operations in middleware handle errors correctly to prevent unhandled promise rejections.

Impact:
	•	Maintainability: Cleaner code is easier to maintain and less prone to bugs.
	•	Security: Minimizing exposed information in errors reduces security risks.

Solution:
	•	Review Imports: Remove any unused imports or types.
	•	Sanitize Error Messages: Ensure that detailed error messages are only sent in non-production environments.
	•	Handle Async Errors: Use next(err) properly in asynchronous middleware to pass errors to the error handlers.

Example Correction:
	1.	Remove Unused Imports:

// For example, if 'AppError' is imported but not used, remove it.
// Similarly, ensure all custom middlewares and utilities are correctly imported.


	2.	Sanitize Error Messages:

// In your final error handler
const response = {
  message: env.NODE_ENV === 'production' 
    ? 'An unexpected error occurred' 
    : err.message,
  status,
  requestId: context.requestId,
  ...(env.NODE_ENV === 'development' ? { 
    stack: err.stack,
    errorCode: isAppError(err) ? err.context.errorCode : 'UNKNOWN_ERROR'
  } : {})
};


	3.	Ensure Proper Async Error Handling:

// Example of proper async error handling in middleware
app.use(async (req, res, next) => {
  try {
    // Async operations
    await someAsyncFunction();
    next();
  } catch (err) {
    next(err);
  }
});

Final Revised Code Snippet

Below is a revised version of your main server file, incorporating the corrections and best practices discussed above. Note that due to the complexity and size, not all parts are fully fleshed out, but the key areas have been addressed.

import express from "express";
import type { Request, Response, NextFunction } from "express";
import type { ServeStaticOptions } from 'serve-static';
import type { ServerResponse, IncomingMessage } from 'http';
import rateLimit from 'express-rate-limit';
import type { Session, SessionData } from "express-session";
import { registerRoutes } from "./routes";
import { setupVite } from "./vite";
import { createServer } from "http";
import session from "express-session";
import cors from "cors";
import path from "path";
import { fileURLToPath } from 'url';
import fs from "fs";
import { db } from "./db";
import { sql } from "drizzle-orm";
import { env } from "./lib/env";
import { log, debug, info, warn, error } from "./lib/log";
import { createSessionConfig } from './config/session';
import { securityHeaders, sanitizeInput, sessionSecurity, cleanupSessions } from './middleware/security';
import { 
  trackError, 
  initRequestTracking, 
  AuthenticationError,
  DatabaseError,
  ValidationError,
  AppError 
} from './lib/errorTracking';

// ES Module compatibility
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Initialize express app
const app = express();

// Consolidated interface definitions (ensure they're defined only once)
// ... [Assume all interfaces/types are defined here without duplication]

// Configure CORS options
const corsOptions: cors.CorsOptions = {
  origin: (origin, callback) => {
    const allowedOrigins = [
      env.APP_URL,
      'http://localhost:3000',
      'http://localhost:5000',
      // Allow all subdomains of repl.co and replit.dev
      /^https?:\/\/[^.]+\.repl\.co$/,
      /^https?:\/\/[^.]+\.replit\.dev$/
    ];

    // Allow requests with no origin (like mobile apps, curl requests, or same-origin)
    if (!origin || origin === 'null') {
      callback(null, true);
      return;
    }

    // Allow all origins in development
    if (env.NODE_ENV === 'development') {
      callback(null, true);
      return;
    }

    // Check against allowed origins in production
    const isAllowed = allowedOrigins.some(allowed => 
      typeof allowed === 'string' 
        ? allowed === origin 
        : allowed.test(origin)
    );

    if (isAllowed) {
      callback(null, true);
    } else {
      warn({
        message: 'CORS blocked origin',
        origin,
        allowedOrigins: allowedOrigins.map(o => o.toString())
      });
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
  methods: ['GET', 'HEAD', 'PUT', 'PATCH', 'POST', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Cache-Control', 'Origin'],
  exposedHeaders: ['Content-Type', 'Content-Length', 'Set-Cookie', 'ETag', 'Cache-Control'],
  maxAge: 86400,
  optionsSuccessStatus: 204,
  preflightContinue: false
};

// Configure basic rate limiting for DoS protection
const limiter = rateLimit({
  windowMs: 5 * 60 * 1000, // 5 minutes
  max: 1000, // Increased limit
  message: { error: 'Too many requests, please try again shortly.' },
  standardHeaders: true,
  legacyHeaders: false,
  skip: (req: Request) => {
    // Skip rate limiting for essential routes and development
    return req.path.startsWith('/api/auth/') || 
           req.path.startsWith('/api/user/') ||
           env.NODE_ENV === 'development';
  },
  handler: (req: Request, res: Response) => {
    warn({
      message: 'Rate limit exceeded',
      path: req.path,
      method: req.method,
      ip: req.ip
    });
    res.status(429).json({ 
      error: 'Too many requests',
      message: 'Please try again in a few minutes'
    });
  }
});

// Initialize middleware
async function initializeMiddleware() {
  try {
    // Environment-specific settings
    if (env.NODE_ENV === 'production') {
      // Configure trust proxy for Replit's environment
      app.set('trust proxy', (ip: string) => {
        return ip === '127.0.0.1' || 
               ip.startsWith('10.') || 
               ip.startsWith('172.16.') || 
               ip.startsWith('192.168.');
      });
    } else {
      app.set('json spaces', 2);
    }
    app.set('x-powered-by', false);
    
    info(`Server initializing in ${env.NODE_ENV} mode`);

    // Initialize session first
    const sessionConfig = await createSessionConfig();
    if (!sessionConfig) {
      throw new Error('Failed to create session configuration');
    }
    app.use(session(sessionConfig));
    
    // Add session cleanup middleware
    app.use(cleanupSessions);

    // Apply basic security headers
    app.use(securityHeaders);
    
    // Apply CORS
    app.use(cors(corsOptions));
    
    // Apply general rate limiting for DoS protection
    app.use(limiter);
    
    // Apply parameter sanitization
    app.use(sanitizeInput);
    
    // Apply session security
    app.use(sessionSecurity);

    // Body parsing middleware with size limits and validation
    app.use(express.json({ 
      limit: '10mb',
      verify: (req: Request, res: Response, buf: Buffer) => {
        if (req.headers['content-type']?.includes('application/json')) {
          try {
            JSON.parse(buf.toString());
          } catch (e) {
            res.status(400).json({ message: 'Invalid JSON' });
            throw new Error('Invalid JSON');
          }
        }
        return true;
      }
    }));
    app.use(express.urlencoded({ extended: true, limit: '10mb' }));

    // Static file serving with proper caching
    const publicPath = path.resolve(__dirname, '..', 'dist', 'public');
    if (!fs.existsSync(publicPath)) {
      fs.mkdirSync(publicPath, { recursive: true });
    }

    // Configure static file serving based on environment
    if (env.NODE_ENV === 'production') {
      const staticOptions: ServeStaticOptions & { setHeaders: (res: ServerResponse<IncomingMessage>, path: string) => void } = {
        index: false,
        etag: true,
        lastModified: true,
        setHeaders: (res, filepath) => {
          try {
            res.setHeader('X-Content-Type-Options', 'nosniff');

            const ext = path.extname(filepath).toLowerCase();
            let cacheControl = 'public, max-age=86400';

            if (ext === '.html') {
              res.setHeader('Pragma', 'no-cache');
              res.setHeader('Expires', '0');
              cacheControl = 'no-cache, no-store, must-revalidate';
            } else if (['.js', '.mjs', '.css', '.png', '.jpg', '.jpeg', '.gif', '.ico', '.svg'].includes(ext)) {
              cacheControl = 'public, max-age=31536000, immutable';
            }

            res.setHeader('Cache-Control', cacheControl);
          } catch (err) {
            console.error('Error setting headers:', err);
          }
        },
        maxAge: '1d',
        immutable: true
      };

      // Serve static files with specific routes first
      app.use('/assets/js', express.static(path.join(publicPath, 'assets/js'), staticOptions));
      app.use('/assets/css', express.static(path.join(publicPath, 'assets/css'), staticOptions));
      app.use('/assets', express.static(path.join(publicPath, 'assets'), staticOptions));
      app.use(express.static(publicPath, staticOptions));

      // Add static file error handling middleware
      app.use((err: Error | StaticFileError, req: TypedRequest, res: Response, next: NextFunction) => {
        if (err && (req.path.startsWith('/assets/') || path.extname(req.path))) {
          const errorDetails: StaticErrorLog = {
            message: 'Static file serving error',
            path: req.path,
            error_message: err.message,
            metadata: {
              request_headers: Object.fromEntries(Object.entries(req.headers)),
              response_headers: Object.fromEntries(Object.entries(res.getHeaders())),
              mime_type: req.get('Content-Type') || '',
              method: req.method
            }
          };
          
          error(errorDetails);
          
          if ('code' in err && err.code === 'ENOENT') {
            return res.status(404).json({ 
              message: 'File not found',
              path: req.path,
              requestId: req.headers['x-request-id']
            });
          }
          
          return res.status(500).json({ 
            message: 'Error serving static file',
            requestId: req.headers['x-request-id']
          });
        }
        next(err);
      });
    } else {
      // In development, use Vite's built-in static serving
      const server = createServer(app);
      await setupVite(app, server);
    }

    info('Middleware initialized successfully');
  } catch (err) {
    error({
      message: 'Failed to initialize middleware',
      stack: err instanceof Error ? err.stack : undefined
    });
    throw err;
  }
}

// Setup error handlers
function setupErrorHandlers() {
  // Add request tracking
  app.use(initRequestTracking());

  // API route not found handler
  app.use('/api/*', (req: TypedRequest, res: Response) => {
    const context = trackError(
      new AppError('API endpoint not found', {
        errorCode: 'NOT_FOUND',
        statusCode: 404
      }), 
      req
    );
    
    res.status(404).json({ 
      message: 'API endpoint not found',
      requestId: context.requestId
    });
  });

  // Authentication error handler
  app.use((err: Error, req: TypedRequest, res: Response, next: NextFunction) => {
    if (err instanceof AuthenticationError || err.name === 'SessionError') {
      const context = trackError(err, req);
      return res.status(401).json({ 
        message: 'Authentication failed',
        error: 'Please sign in again',
        requestId: context.requestId
      });
    }
    next(err);
  });

  // Validation error handler
  app.use((err: Error, req: TypedRequest, res: Response, next: NextFunction) => {
    if (err instanceof ValidationError) {
      const context = trackError(err, req);
      return res.status(400).json({
        message: 'Validation failed',
        error: err.message,
        requestId: context.requestId
      });
    }
    next(err);
  });

  // Database error handler
  app.use((err: Error, req: TypedRequest, res: Response, next: NextFunction) => {
    if (err instanceof DatabaseError || err.message.includes('database')) {
      const context = trackError(err, req);
      return res.status(503).json({ 
        message: 'Service temporarily unavailable',
        error: 'Please try again later',
        requestId: context.requestId
      });
    }
    next(err);
  });

  // Final error handler
  app.use((err: Error | AppError, req: TypedRequest, res: Response, _next: NextFunction) => {
    const context = trackError(err, req, res);
    const status = isAppError(err) ? err.context.statusCode : 500;
    
    const response: Record<string, any> = {
      message: env.NODE_ENV === 'production' 
        ? 'An unexpected error occurred' 
        : err.message,
      status,
      requestId: context.requestId
    };

    if (env.NODE_ENV === 'development') {
      response.stack = err.stack;
      response.errorCode = isAppError(err) ? err.context.errorCode : 'UNKNOWN_ERROR';
    }

    res.status(status).json(response);
  });

  // Handle client-side routing for non-API routes
  app.get('*', (req: Request, res: Response, next: NextFunction) => {
    if (req.path.startsWith('/api/')) {
      next();
    } else {
      res.sendFile('index.html', { 
        root: path.join(__dirname, '..', 'dist', 'public')
      });
    }
  });
}

// Main application entry point
async function main() {
  let PORT = parseInt(process.env.PORT || '5000', 10);
  let server: ReturnType<typeof createServer> | undefined;

  try {
    // Test database connection with retry mechanism
    let retries = 5;
    let backoff = 1000; // Start with 1 second

    while (retries > 0) {
      try {
        await db.execute(sql`SELECT NOW()`);
        info('Database connection successful');
        break;
      } catch (err) {
        retries--;
        if (retries === 0) {
          throw new Error('Failed to connect to database after multiple attempts');
        }
        warn({
          message: `Database connection failed, retrying in ${backoff / 1000} seconds...`,
          error_message: err instanceof Error ? err.message : String(err)
        });
        
        await new Promise(resolve => setTimeout(resolve, backoff));
        backoff *= 2; // Exponential backoff
      }
    }

    // Initialize middleware
    await initializeMiddleware();
    info('Middleware initialized successfully');

    // Register routes
    registerRoutes(app);
    info('Routes registered');

    // Setup error handlers
    setupErrorHandlers();
    info('Error handlers configured');

    // Create HTTP server
    server = createServer(app);
    info('HTTP server created');

    // Start server with retry mechanism
    const maxRetries = 5;
    let retriesPort = 0;

    while (retriesPort < maxRetries) {
      try {
        await new Promise<void>((resolve, reject) => {
          server!.listen(PORT, '0.0.0.0', () => {
            resolve();
          });

          server!.once('error', (err: NodeJS.ErrnoException) => {
            if (err.code === 'EADDRINUSE') {
              reject(new Error('EADDRINUSE'));
            } else {
              reject(err);
            }
          });
        });

        info(`Server running in ${env.NODE_ENV} mode on port ${PORT}`);
        info(`APP_URL: ${env.APP_URL}`);
        break; // Successfully started the server
      } catch (err) {
        if ((err as Error).message === 'EADDRINUSE') {
          warn(`Port ${PORT} is in use, trying ${PORT + 1}`);
          PORT += 1;
          retriesPort += 1;
        } else {
          throw err; // Re-throw unexpected errors
        }
      }
    }

    if (retriesPort === maxRetries) {
      throw new Error(`Failed to bind to any port after ${maxRetries} attempts`);
    }

  } catch (err) {
    error({
      message: 'Fatal error in server startup',
      stack: err instanceof Error ? err.stack : String(err)
    });

    if (server?.listening) {
      await new Promise<void>((resolve) => server!.close(() => resolve()));
    }
    
    process.exit(1);
  }

  // Handle process signals
  process.on('SIGTERM', () => {
    info('SIGTERM received, shutting down');
    server?.close(() => process.exit(0));
  });

  process.on('SIGINT', () => {
    info('SIGINT received, shutting down');
    server?.close(() => process.exit(0));
  });
}

// Start server
main().catch(err => {
  error({
    message: 'Fatal error starting server',
    stack: err instanceof Error ? err.stack : String(err)
  });
  process.exit(1);
});

Additional Recommendations
	1.	Use Environment Variables Securely:
	•	Ensure sensitive information like database credentials and session secrets are securely managed, preferably using environment variables and a .env file excluded from version control.
	2.	Logging Enhancements:
	•	Consider integrating a robust logging library like Winston for better log management.
	•	Implement log rotation to prevent log files from growing indefinitely.
	3.	Security Best Practices:
	•	Regularly update dependencies to patch known vulnerabilities.
	•	Implement Helmet for setting various HTTP headers to secure Express apps.
	4.	Testing:
	•	Implement unit and integration tests to ensure middleware and routes function as expected.
	•	Use tools like Jest or Mocha for testing.
	5.	Performance Optimization:
	•	Implement caching strategies where appropriate.
	•	Use compression middleware like compression to gzip responses.
	6.	Documentation:
	•	Document your middleware and route handlers for better maintainability.
	•	Consider using tools like JSDoc for inline documentation.

By addressing the above issues and following the recommended best practices, your Express.js server should become more robust, maintainable, and secure. If you encounter specific errors or unexpected behaviors after these adjustments, feel free to provide the error messages or logs for more targeted assistance.