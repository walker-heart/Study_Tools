Here's a complete script to implement Google OAuth. Create a new file through the Replit shell and paste this entire implementation:
TypeScript
Copy
// === SERVER SETUP ===
// File: server/auth.ts
 
import express from 'express';
import session from 'express-session';
import { OAuth2Client } from 'google-auth-library';
import cors from 'cors';
 
const app = express();
 
// Middleware
app.use(cors({
 origin: process.env.NODE_ENV === 'production'
   ? 'https://memorization-game.harrybhai.repl.co'
   : 'http://localhost:5000',
 credentials: true
}));
 
app.use(express.json());
app.use(session({
 secret: process.env.SESSION_SECRET || 'your-secret-key',
 resave: false,
 saveUninitialized: false,
 cookie: {
   secure: process.env.NODE_ENV === 'production',
   httpOnly: true,
   sameSite: process.env.NODE_ENV === 'production' ? 'none' : 'lax'
 }
}));
 
// OAuth Setup
const oauth2Client = new OAuth2Client(
 process.env.VITE_GOOGLE_CLIENT_ID,
 process.env.GOOGLE_CLIENT_SECRET,
 'https://memorization-game.harrybhai.repl.co/oauth2callback'
);
 
// Auth Routes
app.get('/auth/google', (req, res) => {
 const authUrl = oauth2Client.generateAuthUrl({
   access_type: 'offline',
   scope: [
     'https://www.googleapis.com/auth/userinfo.email',
     'https://www.googleapis.com/auth/userinfo.profile',
     'openid'
   ]
 });
 res.redirect(authUrl);
});
 
app.get('/oauth2callback', async (req, res) => {
 try {
   const { code } = req.query;
   const { tokens } = await oauth2Client.getToken(code as string);
  
   // Get user info
   const ticket = await oauth2Client.verifyIdToken({
     idToken: tokens.id_token!,
     audience: process.env.VITE_GOOGLE_CLIENT_ID
   });
  
   const payload = ticket.getPayload();
  
   // Store user info in session
   req.session.user = {
     email: payload?.email,
     name: payload?.name,
     picture: payload?.picture
   };
  
   res.redirect('/');
 } catch (error) {
   console.error('OAuth callback error:', error);
   res.redirect('/login?error=auth_failed');
 }
});
 
app.get('/auth/logout', (req, res) => {
 req.session.destroy(() => {
   res.redirect('/');
 });
});
 
// === FRONTEND COMPONENT ===
// File: client/src/components/GoogleAuth.tsx
 
import React from 'react';
import { useNavigate } from 'react-router-dom';
 
export function GoogleAuth() {
 const navigate = useNavigate();
 
 const handleGoogleLogin = () => {
   window.location.href = '/auth/google';
 };
 
 return (
   <button
     onClick={handleGoogleLogin}
     className="flex items-center justify-center gap-2 px-4 py-2 bg-white text-gray-700 rounded-lg shadow hover:bg-gray-50 transition-colors"
   >
     <svg className="w-5 h-5" viewBox="0 0 24 24">
       <path
         fill="currentColor"
         d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
       />
       <path
         fill="currentColor"
         d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
       />
       <path
         fill="currentColor"
         d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
       />
       <path
         fill="currentColor"
         d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
       />
     </svg>
     Sign in with Google
   </button>
 );
}
 
// === PACKAGE.JSON DEPENDENCIES ===
// Add these to your package.json dependencies:
{
 "dependencies": {
   "@types/express-session": "^1.17.7",
   "express": "^4.18.2",
   "express-session": "^1.17.3",
   "google-auth-library": "^9.0.0",
   "react-router-dom": "^6.15.0"
 }
}
To implement this:
Install dependencies:
Shell Script
Copy
npm install express express-session google-auth-library react-router-dom @types/express-session
Add these to your Replit Secrets:
Copy
VITE_GOOGLE_CLIENT_ID=143891182855-p8nm871lbu8evfrn4monhvsalolu5ebt.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=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
SESSION_SECRET=your_random_secret_string
Import and use the GoogleAuth component where needed:
TypeScript
Copy
import { GoogleAuth } from './components/GoogleAuth';
 
// In your login page or component:
<GoogleAuth />
This implementation includes:
Server-side OAuth handling
Session management
Frontend Google sign-in button
Proper error handling
TypeScript support
Secure cookie configuration
Production/development environment handling
Let me know if you need help with any specific part or if you'd like to test the implementation!

